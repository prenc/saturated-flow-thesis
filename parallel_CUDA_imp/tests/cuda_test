#!/usr/bin/env bash
#:       Title: run_tests.sh - Runs performence tests for all .cu files in pwd.
#:    Synopsis: run_tests.sh
#:        Date: 2019-10-10
#:      Author: PaweÅ‚ Renc
#:     Options: none
shopt -s nullglob   # allow globs to return null string
## Script metadata
scriptname=${0##*/} # name that script is invoked with
## Parse command-line options
while (($#)); do
  case $1 in
  -h)
    usage
    ;;
  *)
    group="$1"
    shift
    ;;
  esac
done
## Constants
ca_size_arr=("100" "100" "1000" "1000")
block_size_arr=("16" "32" "16" "32")
iterations_arr=("1000" "1000" "10000" "10000")
params_file="params.h"
summary_file="prof_summary"
compiled_dir="compiled"
profiling_dir="profiling"
conf_file="cuda_test_conf.json"
## Func definitions
info() { #@ DESCRIPTION: print information about running process
  #@ USAGE: ok information
  #@ REQUIRES: scriptname
  printf "${scriptname}: [\e[34mINFO\e[0m] %s\n" "$1" >&2
}
error() { #@ DESCRIPTION: print error message and exit with supplied return code
  #@ USAGE: error information error_code
  #@ REQUIRES: scriptname
  printf "${scriptname}: [\e[31mERROR\e[0m] %s\n" "$1" >&2
  exit "${2:-2}"
}

parse_conf() {
  [[ -f "${conf_file}" ]] || error "No config file found!" 2

  test_params=$(get_json "${group}" <"${conf_file}")
  [[ -z "${test_params}" ]] && error "No such test group" 5

  test_specs=$(get_json "test_specs" <<< "${test_params}")
  [[ -z "${test_specs}" ]] && error "Conf file syntax error" 3

  json_arr_to_bash_arr "$(get_json "ca_size" <<<"${test_specs}")"
  mapfile -d" " ca_size_arr <<<"${bash_arr}"
  (("${#ca_size_arr[@]}")) || error "Conf file syntax error in ca_size of ${group} group" 3

  json_arr_to_bash_arr "$(get_json "block_size" <<<"${test_specs}")"
  mapfile -d" " block_size_arr <<<"${bash_arr}"
  (("${#block_size_arr[@]}")) || error "Conf file syntax error in block_size of ${group} group" 3

  json_arr_to_bash_arr "$(get_json "iterations" <<<"${test_specs}")"
  mapfile -d" " iterations_arr <<<"${bash_arr}"
  (("${#iterations_arr[@]}")) || error "Conf file syntax error in iterations of ${group} group" 3

  test_src=$(get_json "test_src" <<< "${test_params}")
  [[ -z "${test_src}" ]] && error "Conf file syntax error" 3
  json_arr_to_bash_arr "${test_src}"
  mapfile -d" " files_to_compile <<<"${bash_arr}"
  (("${#files_to_compile[@]}")) || error "Cannot read test_src of ${group} group" 3
}

json_arr_to_bash_arr() {
  remove_spaces=${1// /}
  remove_left_braces=${remove_spaces//[/}
  remove_right_braces=${remove_left_braces//]/}
  change_commas_to_spaces=${remove_right_braces//,/ }
  remove_quotes=${change_commas_to_spaces//\"/}
  bash_arr=$remove_quotes
}

get_json() {
  python3 -c "import sys, json; print(str(json.load(sys.stdin)['${1}']).replace(\"'\", '\"'))" 2>/dev/null
}

generate_params() {
  match_ca_size="#define CA_SIZE "
  match_itarations="#define SIMULATION_ITERATIONS "
  match_block_size="#define BLOCK_SIZE "

  new_params_file="/tmp/new_params_ble_ble_ble"

  printf "" >"${new_params_file}"
  while read -r line; do
    if [[ $line =~ ^"${match_ca_size}" ]]; then
      line="${match_ca_size}${ca_size}"
    elif [[ $line =~ ^"${match_itarations}" ]]; then
      line="${match_itarations}${iterations}"
    elif [[ $line =~ ^"${match_block_size}" ]]; then
      line="${match_block_size}${block_size}"
    fi
    printf "%s\n" "${line}" >>"${new_params_file}"
  done <"${params_file}"

  cat ${new_params_file} >${params_file}
  rm -f ${new_params_file}

  file_name_attachement=_"${ca_size}"_"${iterations}"_"${block_size}"
}

compile_cuda_files() {

  [[ -d "${compiled_dir}" ]] || mkdir "${compiled_dir}"
  files_to_compile=("${PWD}"/*.cu)

  for file_name_path in "${files_to_compile[@]}"; do
    file_name_in=${file_name_path##*/}
    file_name_out=${file_name_in%\.cu}${file_name_attachement}

    if [[ ! -f "${compiled_dir}/${file_name_out}" ]]; then
      info "Compiling ${file_name_in}... (${ca_size}, ${iterations}, ${block_size})"
      nvcc "${file_name_in}" -o "${compiled_dir}/${file_name_out}"
    else
      info "Found ${file_name_out}. No need to compile again..."
    fi
  done
}

profile_programs() {

  [[ -d "${profiling_dir}" ]] || mkdir "${profiling_dir}" && rm -f "${profiling_dir}/*"

  files_to_profile=("${PWD}"/"${compiled_dir}"/*"${file_name_attachement}")

  for file_name_path in "${files_to_profile[@]}"; do
    file_name=${file_name_path##*/}
    info "Profiling ${file_name}... (${ca_size}, ${iterations}, ${block_size})"
    start=$(date +%s)
    sudo nvprof --unified-memory-profiling off ./"${compiled_dir}/${file_name}" \
      2>"${profiling_dir}/${file_name}"
    printf "%s\n" $(($(date +%s) - start))s >>"${profiling_dir}/${file_name}"
  done
}

parse_profile_outputs() {
  profiling_data=("${PWD}"/"${profiling_dir}"/*"${file_name_attachement}")

  data=("memory_type" "ca_size" "iterations" "block_size" "total_time" "total_kernel_time" "kernel_min" "kernel_max")

  for prof in "${profiling_data[@]}"; do
    while read -r line; do
      if [[ $line =~ ^"GPU activities:" ]]; then
        read -r -a values <<<"${line}"
        break
      fi
    done <"${prof}"

    total_time=$(tail -n 1 "${prof}")

    label_name="${prof##*/}"
    label_name="${label_name%${file_name_attachement}}"

    data+=("${label_name}" "$ca_size" "$iterations" "$block_size" "${total_time}" "${values[3]}" "${values[6]}" "${values[7]}")
  done

  printf "%s;%s;%s;%s;%s;%s;%s;%s\n" "${data[@]}" >>"${summary_file}"
}

## Script body
start_script=$(date +%s)
printf "" >"${summary_file}"

[[ -z "$group" ]] || parse_conf

for i in "${!ca_size_arr[@]}"; do
  ca_size=${ca_size_arr[i]}
  iterations=${iterations_arr[i]}
  block_size=${block_size_arr[i]}

  generate_params

  compile_cuda_files

  profile_programs

  parse_profile_outputs

done

info "Script time: $(($(date +%s) - start_script))s"

exit 0
