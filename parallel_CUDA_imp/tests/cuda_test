#!/usr/bin/env bash
#:       Title: run_tests.sh - Runs performence tests for all .cu files in pwd.
#:    Synopsis: run_tests.sh
#:        Date: 2019-10-10
#:      Author: PaweÅ‚ Renc
#:     Options: none
shopt -s nullglob   # allow globs to return null string
## Script metadata
scriptname=${0##*/} # name that script is invoked with
script_start_time=$(date +%s)
## Parse command-line options
while (($#)); do
  case $1 in
  -h)
    usage
    ;;
  *)
    group="$1"
    shift
    ;;
  esac
done
## Constants and defaults
ca_size_arr=("100" "100" "1000" "1000")
block_size_arr=("16" "32" "16" "32")
iterations_arr=("1000" "1000" "10000" "10000")
params_file="../src/params.h"
summary_file="prof_summary_${script_start_time}"
compiled_dir="compiled"
profiling_dir="profiling"
conf_file="cuda_test_conf.json"
model_out_file="heads_ca.txt"
## Func definitions
info() { #@ DESCRIPTION: print information about running process
  #@ USAGE: ok information
  #@ REQUIRES: scriptname
  printf "${scriptname}: [\e[34mINFO\e[0m] %s\n" "$1" >&2
}
error() { #@ DESCRIPTION: print error message and exit with supplied return code
  #@ USAGE: error information error_code
  #@ REQUIRES: scriptname
  printf "${scriptname}: [\e[31mERROR\e[0m] %s\n" "$1" >&2
  rm -f "${summary_file}"
  exit "${2:-2}"
}

parse_conf() {
  [[ -f "${conf_file}" ]] || error "No config file found!" 2

  test_params=$(get_json "${group}" <"${conf_file}")
  [[ -z "${test_params}" ]] && error "No such test group" 5

  test_specs=$(get_json "test_specs" <<<"${test_params}")
  [[ -z "${test_specs}" ]] && error "Conf file syntax error" 3

  json_arr_to_bash_arr "$(get_json "ca_size" <<<"${test_specs}")"
  mapfile -t ca_size_arr <<<"${bash_arr}"
  (("${#ca_size_arr[@]}")) || error "Conf file syntax error in ca_size of ${group} group" 3

  json_arr_to_bash_arr "$(get_json "block_size" <<<"${test_specs}")"
  mapfile -t block_size_arr <<<"${bash_arr}"
  (("${#block_size_arr[@]}")) || error "Conf file syntax error in block_size of ${group} group" 3

  json_arr_to_bash_arr "$(get_json "iterations" <<<"${test_specs}")"
  mapfile -t iterations_arr <<<"${bash_arr}"
  (("${#iterations_arr[@]}")) || error "Conf file syntax error in iterations of ${group} group" 3

  if [[ ${#iterations_arr[@]} != "${#block_size_arr[@]}" ]] || [[ ${#ca_size_arr[@]} != "${#block_size_arr[@]}" ]]; then
    error "Conf file syntax error of ${group} group. Test_specs sizes varies" 3
  fi

  test_src=$(get_json "test_src" <<<"${test_params}")
  [[ -z "${test_src}" ]] && error "Conf file syntax error" 3
  json_arr_to_bash_arr "${test_src}"
  mapfile -t cuda_files_from_conf <<<"${bash_arr}"
  (("${#cuda_files_from_conf[@]}")) || error "Cannot read test_src of ${group} group" 3
}

json_arr_to_bash_arr() {
  remove_some_chars=${1//[$'\t\n\r \"\]\[']/}
  bash_arr="$(tr "," "\n" <<<"${remove_some_chars}")"
}

get_json() {
  if ! python3 -c "import sys, json; print(str(json.load(sys.stdin)['${1}']).replace(\"'\", '\"'))" 2>/dev/null; then
    error "Cannot parse json for ${1} key." 4
  fi
}

generate_params() {
  match_ca_size="#define CA_SIZE "
  match_itarations="#define SIMULATION_ITERATIONS "
  match_block_size="#define BLOCK_SIZE "

  new_params_file="new_params_ble_ble_ble"

  printf "" >"${new_params_file}"
  while read -r line; do
    if [[ $line =~ ^"${match_ca_size}" ]]; then
      line="${match_ca_size}${ca_size}"
    elif [[ $line =~ ^"${match_itarations}" ]]; then
      line="${match_itarations}${iterations}"
    elif [[ $line =~ ^"${match_block_size}" ]]; then
      line="${match_block_size}${block_size}"
    fi
    printf "%s\n" "${line}" >>"${new_params_file}"
  done <"${params_file}"

  cat ${new_params_file} >${params_file}
  rm -f ${new_params_file}

  file_name_attachement="_${ca_size}_${iterations}_${block_size}"
}

compile_cuda_files() {
  unset files_to_compile

  [[ -d "${compiled_dir}" ]] || mkdir "${compiled_dir}"
  mapfile -t all_cuda_files <<<"$(find ../src -type f -name "*.cu")"

  if [[ -z ${cuda_files_from_conf[*]} ]]; then
    read -r -a files_to_compile <<<"${all_cuda_files[@]}"
  else
    for cuda_file_conf in "${cuda_files_from_conf[@]}"; do
      for cuda_file in "${all_cuda_files[@]}"; do
        if [ "${cuda_file##*/}" == "${cuda_file_conf//[$'\t\n\r ']/}" ]; then
          files_to_compile+=("${cuda_file}")
        fi
      done
    done
  fi

  for file_name_path in "${files_to_compile[@]}"; do
    file_name_in="${file_name_path##*/}"
    file_name_out="${file_name_in%\.cu}${file_name_attachement}"

    if [[ ! -f "${compiled_dir}/${file_name_out}" ]]; then
      info "Compiling ${file_name_in}... (${ca_size}, ${iterations}, ${block_size})"
      nvcc "${file_name_path}" -o "${compiled_dir}/${file_name_out}"
    else
      info "Found ${file_name_out}. No need to compile again..."
    fi
  done
}

profile_programs() {

  [[ -d "${profiling_dir}" ]] || mkdir "${profiling_dir}" && rm -f "${profiling_dir}/*"

  files_to_profile=("${PWD}"/"${compiled_dir}"/*"${file_name_attachement}")

  for file_name_path in "${files_to_profile[@]}"; do
    profile_program "${file_name_path}"
  done
}

profile_program() {
  file_name=${1##*/}

  info "Profiling ${file_name}... (${ca_size}, ${iterations}, ${block_size})"
  run_profiling

  {
    printf "{\n" >>"${profiling_dir}/${file_name}"
    printf "\"program_time\": \"%s\",\n" "$(evaluate_mins "${program_elapsed_time}")"
    printf "\"program_valid\": \"%d\"\n" "$(validate_program_execution)"
    printf "}\n"
  } >"${profiling_dir}/${file_name}"
}

run_profiling() {
  [[ -f "${model_out_file}" ]] && rm -f "${model_out_file}"

  program_start_time=$(date +%s)
  ./"${compiled_dir}/${file_name}"
  program_elapsed_time=$(($(date +%s) - program_start_time))
}

validate_program_execution() {
  if [[ -s "${model_out_file}" ]]; then
      return 1
    else
      return 0
  fi
}

parse_profile_outputs() {
  profiling_data=("${PWD}"/"${profiling_dir}"/*"${file_name_attachement}")

  data=("memory_type" "ca_size" "iterations" "block_size" "program_valid" "total_time")

  for prof in "${profiling_data[@]}"; do

    program_time=$(get_json "program_time" < "${prof}")
    program_valid=$(get_json "program_valid" < "${prof}")

    label_name="${prof##*/}"
    label_name="${label_name%${file_name_attachement}}"

    data+=("${label_name}" "$ca_size" "$iterations" "$block_size" "${program_valid}" "${program_time}")
  done

  printf "%s;%s;%s;%s;%s;%s\n" "${data[@]}" >>"${summary_file}"
}

print_elapsed_time() {
  script_elapsed_time=$(($(date +%s) - script_start_time))

  msg="Script time $(evaluate_mins ${script_elapsed_time})"

  info "${msg}"

  printf "%s\n" "${msg}" >>"${summary_file}"
}

evaluate_mins() {
  min=$(("${1}" / 60))
  sec=$(("${1}" % 60))

  printf "%sm%ss" ${min} ${sec}
}

## Script body
[[ -f "${summary_file}" ]] && true >"${summary_file}"

# todo remove summary_file when exit no 0
# todo remove params.h when exit no 0 and other cases when not needed

[[ -z "$group" ]] || parse_conf

for i in "${!ca_size_arr[@]}"; do
  ca_size=${ca_size_arr[i]}
  iterations=${iterations_arr[i]}
  block_size=${block_size_arr[i]}

  generate_params

  compile_cuda_files

  profile_programs

  parse_profile_outputs

done

print_elapsed_time

exit 0
